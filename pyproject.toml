[build-system]
requires = [ "setuptools" ]
build-backend = 'setuptools.build_meta'

[tool.setuptools.packages.find]
include = ["terratorch*"]

[project]
name = "terratorch"
version = "1.0.2"
description = "TerraTorch - The geospatial foundatoin model fine-tuning toolkit"
license = { "text" = "Apache License, Version 2.0" }
readme = "README.md"
requires-python = ">=3.10"
keywords = ["fine-tuning", "geospatial foundation models", "artificial intelligence"]
authors = [
  { email = "terratorch@ibm.com"},
  { name = "Carlos Gomes"},
  { name = "Joao Lucas de Sousa Almeida"},
  { name = "Romeo Kienzler"},
  { name = "Benedikt Blumenstiel"},
  { name = "Francesc Martí Escofet"},
  { name = "Paolo Fraccaro"},
  { name = "Pedro Henrique Conrado"},
  { name = "Jaione Tirapu Azpiroz"},
  { name = "Daniela Szwarcman"},
  { name = "Bianca Zadrozny"},
  { name = "Þorsteinn Elí Gíslason"},
  { name = "Raunak Bhansali"},
  { name = "Takao Moriyama"},
  { name = "Þorsteinn Elí Gíslason"}
]
classifiers = [
#  "Development Status :: 2 - Pre-Alpha",
#  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
#  "Programming Language :: Python :: Implementation :: CPython",
]

dependencies = [
  "torch",
  "torchvision",
  "rioxarray",
  "albumentations==1.4.6",
  "albucore==0.0.16",
  "rasterio",
  "torchmetrics",
  "geopandas",
  "lightly",
  "jsonargparse<=4.35.0",
  "h5py",
  "mlflow",
  "lightning",
  "segmentation-models-pytorch<=0.4",
  "jsonargparse",
  "pytest",
  "torchgeo",
  "einops",
  "timm>=1.0.15",
  "pycocotools",
  "huggingface_hub",
  "tifffile"

]


[project.optional-dependencies]
dev = [
  "black",
  "mkdocs-material",
  "mkdocstrings[python]",
  "mike", # for building docs with versions
  "mkdocs-git-revision-date-localized-plugin",
  "pre-commit"
]

test = [
  "pytest",
  "pytest-coverage",
  "coverage-badge",
  "peft>=0.15.0",
  "diffusers>=0.30.0",
  "dask",
]

mmseg = [
  "mmcv",
  "ftfy",
  "regex",
  "openmim"
]

wxc = [
  "PrithviWxC",
  "granitewxc"
]

visualize = [
  "torchview",
  "graphviz"
]

peft = [
  "peft>=0.15.0"
]

[project.urls]
Documentation = "https://ibm.github.io/terratorch/"
Issues = "https://github.com/IBM/terratorch/issues"
Source = "https://github.com/IBM/terratorch"

[project.scripts]
terratorch = "terratorch.__main__:main"

[[tool.mypy.overrides]]
module = "timm"
ignore_missing_imports = true

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["terratorch"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Tasks rely on torch lightning saving args to hparams dict
"terratorch/tasks/*" = ["ARG002"]

[tool.coverage.run]
source_pkgs = ["terratorch", "tests"]
branch = true
parallel = true
omit = [
  "terratorch/__about__.py",
]

[tool.coverage.paths]
terratorch = ["terratorch"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.bumpver]
current_version = "0.99.5"
version_pattern = "MAJOR.MINOR.PATCH[PYTAGNUM]"
commit_message = "Bump version {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'current_version = "{version}"',
    'version = "{version}"'
]

[build-system]
requires = [ "setuptools" ]
build-backend = 'setuptools.build_meta'

[tool.setuptools.packages.find]
include = ["terratorch*"]

[project]
name = "terratorch"
version = "0.99.7"
description = "TerraTorch - A model training toolkit for geospatial tasks"
license = { "text" = "Apache License, Version 2.0" }
readme = "README.md"
requires-python = ">=3.10"
keywords = ["fine-tuning", "geospatial foundation models", "artificial intelligence"]
authors = [
  { name = "Carlos Gomes", email = "carlos.gomes@ibm.com" },
  { name = "Joao Lucas de Sousa Almeida", email = "joao.lucas.sousa.almeida@ibm.com"},
  { name = "Romeo Kienzler"},
  { name = "Benedikt Blumenstiel"}
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]

dependencies = [
  "torch>=2.1.0, <=2.5.0",
  "torchvision>=0.16.0",
  "torchgeo>=0.6.0",
  "rioxarray>=0.15.0",
  # see issue #64
  "albumentations>=1.3.1, <=1.4.10",
  "albucore<=0.0.16",
  "rasterio>=1.3.9",
  "torchmetrics<=1.3.1",
  "geopandas>=0.14.4",
  "lightly>=1.4.25",
  "h5py>=3.10.0",
  "mlflow>=2.12.1",
  # broken due to https://github.com/Lightning-AI/pytorch-lightning/issues/19977
  "lightning[pytorch-extra]>=2,!=2.3.*",
  "segmentation-models-pytorch>=0.3"
  # Dependencies not available on PyPI
]

[project.optional-dependencies]
dev = [
  "black",
  "mkdocs-material",
  "mkdocstrings[python]",
  "mike" # for building docs with versions
]
test = [
  "coverage",
  "pytest"
]

mmseg = [
  "mmcv",
  "ftfy",
  "regex",
  "openmim"
]

wxc = [
  "PrithviWxC",
  "granitewxc"
]

#geobench = [
#  "geobench @ git+https://github.com/fmartiescofet/geo-bench.git" # pull from fork until depenedencies for geobench are relaxed
#]

peft = [
  "peft"
]

[project.urls]
Documentation = "https://github.com/IBM/terratorch#readme"
Issues = "https://github.com/IBM/terratorch/issues"
Source = "https://github.com/IBM/terratorch"

[project.scripts]
terratorch = "terratorch.__main__:main"

[[tool.mypy.overrides]]
module = "timm"
ignore_missing_imports = true

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["terratorch"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Tasks rely on torch lightning saving args to hparams dict
"terratorch/tasks/*" = ["ARG002"]

[tool.coverage.run]
source_pkgs = ["terratorch", "tests"]
branch = true
parallel = true
omit = [
  "terratorch/__about__.py",
]

[tool.coverage.paths]
terratorch = ["terratorch"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.bumpver]
current_version = "0.99.5"
version_pattern = "MAJOR.MINOR.PATCH[PYTAGNUM]"
commit_message = "Bump version {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'current_version = "{version}"',
    'version = "{version}"'
]
